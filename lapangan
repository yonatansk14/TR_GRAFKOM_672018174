#include<windows.h>
#include<gl/glut.h>
#include "math.h"

void init(void);
void tampil(void);
void keyboard(unsigned char key, int, int);
void mouse(int button, int state, int x, int y);
void mouseMotion(int x, int y);
void ukuran(int, int);
void lapangan();
void gawang();
void lingkaran();

float xrot=0.0f;
float yrot=0.0f;
float xdiff=0.0f;
float ydiff=0.0f;
bool mouseDown=false;
int is_depth;

int main(int argc, char **argv){
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(800, 600);
	glutInitWindowPosition(250, 80);
	glutCreateWindow("672018174 - 672018084 - 672018217");
	init();
	glutDisplayFunc(tampil);
	glutReshapeFunc(ukuran);
	glutMouseFunc(mouse);
	glutMotionFunc(mouseMotion);
	glutKeyboardFunc(keyboard);
	glutMainLoop();
	return 0;
}

void init(void){
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glMatrixMode(GL_PROJECTION);
    glEnable(GL_COLOR_MATERIAL);
    glEnable(GL_LIGHT0);
    glEnable(GL_DEPTH_TEST);
    glLineWidth(3);
    is_depth=1;
    glMatrixMode(GL_MODELVIEW);
}

const double phi = 3.141592653589793;
int i;

void lingkaran(int xb, int yb, int zb, int r, int n){
    glBegin(GL_LINE_LOOP);
    for (int i=0; i<=360; i++){
    	float angle = i*(2*phi/n);
        float x = xb+r * cos(angle);
        float y = yb+r * sin(angle);
        float z = zb+r;
        glVertex3d(x,y,z);
    }
    glEnd();
}

void lapangan(){

    //lapangan
    glBegin(GL_POLYGON);
    glColor3f(0.0, 0.7,0.0);
    glVertex3f(-33,-30,13);
    glVertex3f(33,-30,13);
    glVertex3f(33,-30,-28);
    glVertex3f(-33,-30,-28);
    glEnd();

    //garislapangan
    glBegin(GL_LINE_LOOP);
    glColor3f(1,1,1);
    glVertex3f(-30,-30,10);
    glVertex3f(30,-30,10);
    glVertex3f(30,-30,-25);
    glVertex3f(-30,-30,-25);
    glEnd();

    /*//garislapangantengah
    glColor3f(1,1,1);
    lingkaran(0,0,0,20,40);
    */
    glBegin(GL_LINES);
    glColor3f(1,1,1);
    glVertex3f(0,-30,10);
    glVertex3f(0,-30,-25);
    glEnd();

    //gariskotakgawangluar1
    glBegin(GL_LINE_LOOP);
    glColor3f(1,1,1);
    glVertex3f(-30,-30,2);
    glVertex3f(-30,-30,-17);
    glVertex3f(-21,-30,-17);
    glVertex3f(-21,-30,2);
    glEnd();

    //gariskotakgawangdalam1
    glBegin(GL_LINE_LOOP);
    glColor3f(1,1,1);
    glVertex3f(-30,-30,-3);
    glVertex3f(-30,-30,-12);
    glVertex3f(-27,-30,-12);
    glVertex3f(-27,-30,-3);
    glEnd();

    //gariskotakgawangluar2
    glBegin(GL_LINE_LOOP);
    glColor3f(1,1,1);
    glVertex3f(30,-30,2);
    glVertex3f(30,-30,-17);
    glVertex3f(21,-30,-17);
    glVertex3f(21,-30,2);
    glEnd();

    //gariskotakgawangdalam2
    glBegin(GL_LINE_LOOP);
    glColor3f(1,1,1);
    glVertex3f(30,-30,-3);
    glVertex3f(30,-30,-12);
    glVertex3f(27,-30,-12);
    glVertex3f(27,-30,-3);
    glEnd();

    //tianggawang1
    glBegin(GL_LINE_LOOP);
    glColor3f(1,1,1);
    glVertex3f(30,-30,-5);
    glVertex3f(30,-30,-10);
    glVertex3f(30,-27,-10);
    glVertex3f(30,-27,-5);
    glEnd();

     //tianggawang2
    glBegin(GL_LINE_LOOP);
    glColor3f(1,1,1);
    glVertex3f(-30,-30,-5);
    glVertex3f(-30,-30,-10);
    glVertex3f(-30,-27,-10);
    glVertex3f(-30,-27,-5);
    glEnd();



}

void tampil(void){
    glPushMatrix();
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    gluLookAt(0,0,3,0,0,0,0,1,0);
    glRotatef(xrot, 1, 0, 0);
    glRotatef(yrot, 0, 1, 0);
    lapangan();
    glPopMatrix();
    glutSwapBuffers();
}

void keyboard(unsigned char key, int bx, int by){
    switch (key)
    {
		//zoom in
		case 'w':
		case 'W':
			glTranslatef(0, 0, 5);
			break;

		//kanan
		case 'd':
		case 'D':
			glTranslatef(5, 0, 0);
			break;

		//zoom out
		case 's':
		case 'S':
			glTranslatef(0, 0, -5);
			break;

		//kiri
		case 'a':
		case 'A':
			glTranslatef(-5, 0, 0);
			break;

		//buka badan objek
    	case '5':
        	if (is_depth)
        	{
            	is_depth = 0;
            	glDisable(GL_DEPTH_TEST);
        	}
        	else
        	{
            	is_depth = 1;
            	glEnable(GL_DEPTH_TEST);
        	}
		}
		tampil();
}

void mouse(int button, int state, int x, int y){
    if(button == GLUT_LEFT_BUTTON && state == GLUT_DOWN){
        mouseDown = true;
        xdiff = x - yrot;
        ydiff = -y + xrot;
    }
    else
    mouseDown = false;
}

void mouseMotion(int x, int y){
    if(mouseDown){
        yrot = x - xdiff;
        xrot = y + ydiff;

        glutPostRedisplay();
    }
}

void ukuran(int lebar, int tinggi){
    if(tinggi == 0) tinggi = 1;
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(80, lebar / tinggi, 5, 500);
    glTranslatef(0, -5, -150);
    glMatrixMode(GL_MODELVIEW);
}
